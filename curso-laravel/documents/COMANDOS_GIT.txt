pwd (donde estoy)
ls (que carpetas tengo en la ubicacion)
ls -al (muestra ocultos)
code hitoria.txt (abre el archivo con vs code)

COMANDOS GIT

git init
git add .
git commit -m "mensaje"
git rm historia.txt
git rm --cached historia.txt (ESTA EN MEMORIA RAM, por si se equivoca subiendo archivo)
git config (lista todas las funciones)
git config --list (configuracion por defecto de mi git)
git config --list --show-origin (ver donde estan las configuraciones guardadas)
git config --global user.name "Andres Soler" (cambia nombre git)
git config --global user.email "andres.soler@gmail.com" (cambia correo git)
git config -l (lista las configuraciones de git)
git commit "ESC SHIFT + Z + Z se utiliza para salir de la consola y guardar el commit"
git diff "nombre del archivo"
git log (muestra todos los cambios)
git log --stat (muestra las lineas insertadas en bytes)
git log --all --graph --decorate --oneline (muestra commit de forma grafica y ordenada)
alias arbolito="git log --all --graph --decorate --oneline"
git tag -a v0.1 -m "mi primera version" 0345a96 (Se crean tags versionamiento en github releases)
git push origin --tags (se envian tags a github)
git tag -d dormido (Se eliminan tags localmente)
git push origin :refs/tags/dormido (Se eliminan tags de github)
git reset 8ccef657896365cb851315e292fc7ca694333d8e --hard (volver a una version antigua agresiva)
q (salir)
git checkout
git clone url
git show
git branch
git branch nombreRama
git checkout nombreRama
git merge NombreRama
git commit -am "mesnaje" (fusion entre el git add . y el git commit)
git remote add origin https://github.com/andresoler/platzi-laravel.git (se crea remote origin de la url)
git remote
git remote -v
origin  https://github.com/andresoler/platzi-laravel.git (fetch)
origin  https://github.com/andresoler/platzi-laravel.git (push)
git pull origin master
git push origin master --allow-unrelated-histories (se crea merge entre la rama de github y la local)

#SSH
ssh-keygen -t rsa -b 4096 -C "andresoler90@gmail.com" (-> enter)
eval $(ssh-agent -s)
ssh-add -/.ssh/id_rsa
git remote -v
git remote set-url origin git@github

#Manejo de ramas
git show-branch (Muestra rammas existentes y su historia)
git show-branch --all (muestra todas las ramas y su historia)
gitk (Muestra programa forma grafica)
git branch header (Se crean ramas)
git branch footer
git push origin header (Se envian ramas)
git push origin footer

# Realizar pull en repositorios diferentes
git remote -v (Se ven los repositorios)
git remote add upstream https....test.com.github
git pull upstream master (la rama mastes esta en repositorio origin)

#Configurar múltiples colaboradores en un repositorio de GitHub
1. Desde github - Settings - Manage Access - Invite collaborates

#Haciendo deployment a un servidor
Jenkis y Travis CI (Conectan github con un servidor, que al hacer push se ve en linea)

#Editor del readme.md github
https://pandao.github.io/editor.md/en.html










Git reset y git rm son comandos con utilidades muy diferentes, pero a�n as� se confunden muy f�cilmente.

git rm
Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo solo debemos �viajar en el tiempo� y recuperar el �ltimo commit antes de borrar el archivo en cuesti�n.

Recuerda que git rm no puede usarse as� nom�s. Debemos usar uno de los flags para indicarle a Git c�mo eliminar los archivos que ya no necesitamos en la �ltima versi�n del proyecto:

git rm --cached: Elimina los archivos del �rea de Staging y del pr�ximo commit pero los mantiene en nuestro disco duro.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos m�s avanzados).
git reset
Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver. Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atr�s.

Este comando es muy peligroso y debemos usarlo solo en caso de emergencia. Recuerda que debemos usar alguna de estas dos opciones:

Hay dos formas de usar git reset: con el argumento --hard, borrando toda la informaci�n que tengamos en el �rea de staging (y perdiendo todo para siempre). O, un poco m�s seguro, con el argumento --soft, que mantiene all� los archivos del �rea de staging para que podamos aplicar nuestros �ltimos cambios pero desde un commit anterior.

git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, as� podemos aplicar las �ltimas actualizaciones a un nuevo commit.
git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la informaci�n de los commits y del �rea de staging se borra del historial.
�Pero todav�a falta algo!

git reset HEAD: Este es el comando para sacar archivos del �rea de Staging. No para borrarlos ni nada de eso, solo para que los �ltimos cambios de estos archivos no se env�en al �ltimo commit, a menos que cambiemos de opini�n y los incluyamos de nuevo en staging con git add, por supuesto.
�Por que esto es importante?
Imagina el siguiente caso:

Hacemos cambios en los archivos de un proyecto para una nueva actualizaci�n. Todos los archivos con cambios se mueven al �rea de staging con el comando git add. Pero te das cuenta de que uno de esos archivos no est� listo todav�a. Actualizaste el archivo pero ese cambio no debe ir en el pr�ximo commit por ahora.

�Qu� podemos hacer?

Bueno, todos los cambios est�n en el �rea de Staging, incluido el archivo con los cambios que no est�n listos. Esto significa que debemos sacar ese archivo de Staging para poder hacer commit de todos los dem�s.

�Al usar git rm lo que haremos ser� eliminar este archivo completamente de git! Todav�a tendremos el historial de cambios de este archivo, con la eliminaci�n del archivo como su �ltima actualizaci�n. Recuerda que en este caso no busc�bamos eliminar un archivo, solo dejarlo como estaba y actualizarlo despu�s, no en este commit.

En cambio, si usamos git reset HEAD, lo �nico que haremos ser� mover estos cambios de Staging a Unstaged. Seguiremos teniendo los �ltimos cambios del archivo, el repositorio mantendr� el archivo (no con sus �ltimos cambios pero s� con los �ltimos en los que hicimos commit) y no habremos perdido nada.

Conclusi�n: Lo mejor que puedes hacer para salvar tu puesto y evitar un incendio en tu trabajo es conocer muy bien la diferencia y los riesgos de todos los comandos de Git.


